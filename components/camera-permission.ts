export type CameraPermissionState =
  | "granted"
  | "prompt"
  | "denied"
  | "unsupported";

export type CameraCheck = {
  state: CameraPermissionState;
  secure: boolean;
  reason?: string;
};

function isSecure() {
  // ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô https ‡∏´‡∏£‡∏∑‡∏≠ context ‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ (‡∏™‡πà‡∏ß‡∏ô‡∏°‡∏≤‡∏Å Android WebView ‡∏à‡∏∞‡πÇ‡∏≠‡πÄ‡∏Ñ)
  return window.isSecureContext === true || location.protocol === "https:";
}

/** ‡πÄ‡∏ä‡πá‡∏Å‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏î‡πâ‡∏ß‡∏¢ Permissions API (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) + ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢ enumerateDevices */
export async function queryCameraPermission(): Promise<CameraCheck> {
  if (!("mediaDevices" in navigator)) {
    return {
      state: "unsupported",
      secure: isSecure(),
      reason: "navigator.mediaDevices ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏ô‡∏µ‡πâ",
    };
  }
  if (!isSecure()) {
    return {
      state: "denied",
      secure: false,
      reason: "‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà secure context (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô https ‡∏´‡∏£‡∏∑‡∏≠ WebView ‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï)",
    };
  }

  // ‚úÖ ‡πÉ‡∏ä‡πâ Permissions API ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
  const navAny = navigator as any;
  if (navAny.permissions?.query) {
    try {
      const status = await navAny.permissions.query({
        name: "camera" as PermissionName,
      });
      return { state: status.state as CameraPermissionState, secure: true };
    } catch {
      // ‡∏ö‡∏≤‡∏á WebView/‡∏ö‡∏£‡∏≤‡∏ß‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏¢‡∏≠‡∏°‡πÉ‡∏´‡πâ query('camera') ‡∏Å‡πá‡∏õ‡∏•‡πà‡∏≠‡∏¢‡πÑ‡∏õ‡πÉ‡∏ä‡πâ fallback
    }
  }

  // üîÅ Fallback: ‡∏î‡∏π label ‡∏à‡∏≤‡∏Å enumerateDevices (‡∏°‡∏µ label ‡πÑ‡∏î‡πâ‡∏Å‡πá‡∏ï‡πà‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Ñ‡∏¢ grant)
  try {
    const devices = await navigator.mediaDevices.enumerateDevices();
    const hasCam = devices.some((d) => d.kind === "videoinput");
    const anyLabeled = devices.some(
      (d) => d.kind === "videoinput" && !!d.label
    );

    if (!hasCam)
      return { state: "denied", secure: true, reason: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏Å‡∏•‡πâ‡∏≠‡∏á" };
    return { state: anyLabeled ? "granted" : "prompt", secure: true };
  } catch {
    return {
      state: "prompt",
      secure: true,
      reason: "enumerateDevices ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß (‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ç‡∏≠‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡πà‡∏≠‡∏ô)",
    };
  }
}

/** ‡∏Ç‡∏≠‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÅ‡∏ö‡∏ö ‚Äúdry-run‚Äù ‡πÅ‡∏•‡πâ‡∏ß‡∏õ‡∏¥‡∏î‡∏™‡∏ï‡∏£‡∏µ‡∏°‡∏ó‡∏±‡∏ô‡∏ó‡∏µ */
export async function requestCameraOnce(
  constraints: MediaStreamConstraints = {
    video: { facingMode: "user" },
    audio: false,
  }
): Promise<{ ok: boolean; code?: string; error?: string }> {
  if (!("mediaDevices" in navigator)) {
    return { ok: false, error: "‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö mediaDevices" };
  }
  if (!isSecure()) {
    return {
      ok: false,
      code: "SECURE_CONTEXT",
      error: "‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ú‡πà‡∏≤‡∏ô https ‡∏´‡∏£‡∏∑‡∏≠ context ‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢",
    };
  }
  try {
    const stream = await navigator.mediaDevices.getUserMedia(constraints);
    // ‡∏õ‡∏¥‡∏î‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£/‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ï‡∏¥‡∏î‡∏Ñ‡πâ‡∏≤‡∏á
    stream.getTracks().forEach((t) => t.stop());
    return { ok: true };
  } catch (err: any) {
    const code = err?.name || "ERROR";
    const map: Record<string, string> = {
      NotAllowedError:
        "‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå ‡∏´‡∏£‡∏∑‡∏≠ WebView ‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö",
      SecurityError: "‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡πÑ‡∏°‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô https)",
      NotFoundError: "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå",
      NotReadableError: "‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡πÅ‡∏≠‡∏õ‡∏≠‡∏∑‡πà‡∏ô/‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ",
      OverconstrainedError: "‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö (‡πÄ‡∏ä‡πà‡∏ô facingMode)",
      AbortError: "‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏≥‡∏Ç‡∏≠",
      TypeError: "constraints ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö",
    };
    return {
      ok: false,
      code,
      error: map[code] ?? err?.message ?? "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏",
    };
  }
}
